# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uyxB9A11vkF-0rCRLWMzT77pvI_uyTxr
"""

import numpy as np
import pandas as pd

#importação dos arquivos excel para o Python
corridas = pd.read_excel('AllRace.xlsx', sheet_name='Corridas')
pilotos =pd.read_excel('DriversStandings.xlsx', sheet_name='Pilotos')
construtores = pd.read_excel('ConstructorStandings.xlsx', sheet_name='Construtores')

#Análise dos dados
#--------------------

#Ver as primeiras linhas da base de dados - Corridas
corridas.head()

#Ver as estatisticas da base de dados - Pilotos
pilotos.describe()

#contar o número de corridas por temporada
corridas.groupby('Ano').size()

#TRATAMENTO DE DADOS
#---------------------

#Limpar dados ausentes
corridas.dropna(inplace=True)

#Seleção de variáveis para previsão da pole position
variaveis = ['Circuitos', 'Data', 'Temporada', 'Piloto', 'Equipe', 'Melhor volta', 'Posição chegada']
corridas = corridas[variaveis]

#Converter data pro tipo numérico
corridas['Data'] =pd.to_datetime(corridas['Data']).astype(int)// 10**9

#Variaveis categoricas
from sklearn.preprocessing import LabelEncoder

labelencoder = LabelEncoder()
corridas['Circuito'] = labelencoder.fit_transform(corridas['Circuitos'])
corridas['Piloto'] = labelencoder.fit_transform(corridas['Piloto'])
corridas['Equipe'] = labelencoder.fit_transform(corridas['Equipe'])

#Previsão Pole position
from sklearn.linear_model import LinearRegression

x = corridas.drop(['Melhor volta'], axis=1)
y = corridas['Melhor volta']

regressor = LinearRegression()
regressor.fit(x,y)

#Análise de desempenho de pilotos
from sklearn.cluster import KMeans

x = pilotos.drop(['Piloto', 'Nacionalidade', 'Equipe'], axis=1)

kmeans = KMeans(n_clusters=3)
kmeans.fit(x)

#Análise de desempenho de construtores
from sklearn.tree import DecisiontreeClassifier

x = construtores.drop(['Construtor', 'Nacionalidade'], axis=1)
y = construtores['Posição']

clf = DecisionTreeClassifier()
clf.fit(x,y)

#Aplicando janela deslizante 
#MACHINE LEARNING PARA CALCULAR A PREVISAO DA PONTUAÇÃO DE UMA EQUIPE NA TEMPORADA

from sklearn.tree import DecisionTreeRegressor

#Fazer a união das base de dados de corridas e de equipes
dados = pd.merge(corridas, equipes, on=['Temporada', 'Equipe'])

#Agregar dados por temporada e equipe
dados_agrupados = dados.groupby(['Temporada', 'Equipe'], as_index=False).agg({'Pontuação':'sum', 'Posição Chegada': 'min'})

#Preparação dos dados
temporadas = sorted(dados_agrupados['Temporada'].unique())

previsoes = []
for i in range(4, len(temporadas)):
  #Seleção dos dados das ultimas 5 temporadas
  ultimas_temporadas = temporadas[i-4:i+1]
  dados_janela = dados_agrupados[dados_agrupados['Temporada'].isin(ultimas_temporadas)]
  #Separação de dados de treino e dados de teste
  x = dados_janela.drop(['Pontuação'], axis=1)
  y = dados_janela['Pontuação']
  x_treino = x.iloc[:-1]
  y_treino = y.iloc[:-1]
  x_teste = x.iloc[-1:]

  #Criando modelo de regressão
  regressor = DecisionTreeRegressor()
  regressor.fit(x_treino, y_treino)

  #Fazendo a previsão da pontuação da equipe na temporada
  previsao = regressor.predict(x_teste)
  previsoes.append(previsao)

#Colocar tudo em um único dataframe
previsoes_df = pd.DataFrame({'Equipe': dados_agrupados['Equipe'].unique(), 'Temporada': temporadas[4:], 'Pontuacao_Prevista': previsoes})


#Aplicando janela deslizante
#MODELO PARA CALCULAR A PREVISÃO DE VITÓRIAS PARA CADA PILOTO NUMA DETERMINADA TEMPORADA

#Agrupar dados de pilotos e de corridas
dados_agrupados = dados.groupby(['Piloto', 'Corrida'], as_index=False).agg({'Posição Chegada': 'min'}
                                                                            )
#Ordenas as corridas por data 
dados_agrupados.sort_values(by=['Corrida'], inplace=True)

#Adicionar a colua de vitórias por piloto
dados_agrupados['Vitoria'] = dados_agrupados.groupby('Piloto')['Posição Chegada'].apply(lambda x: (x == 1).cumsum())

#Preparação dos dados
corridas = sorted(dados_agrupados['Corrida'].unique())

previsoes = []
for i in range(4, len(corridas)):
  #Seleção dos dados das ultimas 5 corridas
  ultimas_corridas = corridas[i-4:i+1]
  dados_janela = dados_agrupados[dados_agrupados['Corrida'].isin(ultimas_corridas)]
  #Separar dados de treino e dados de teste

  x = dados_janela.drop(['Vitoria'], axis=1)
  y = dados_janela['Vitoria']
  x_treino = x.iloc[:-1]
  y_treino = y.iloc[:-1]
  x_teste = x.iloc[-1:]

  #Criando modelo de regressão
  regressor = DecisionTreeRegressor()
  regressor.fit(x_treino, y_treino)

  #Prevendo o número de vitórias do piloto na corrida atual
  previsao = regressor.predict(x_teste)
  previsoes.append(previsao)

#Unindo-as em um único DataFrame
previsoes_df = pd.DataFrame({'Piloto': dados_agrupados['Pilotos'].unique(), 'Corrida': corridas[4:], 'Vitorias_Previstas': previsoes})



#Criação da matriz de conhecimento 

#Seleção das colunas necessárias
dados_filtrados = dados[['Piloto', 'Equipe', 'Ano', 'Vitoria']]

#Criação da tabela por piloto e equipe
tabela = pd.pivot_table(dados_filtrados, values='Vitoria', index=['Piloto'], columns=['Equipe', 'Ano'], aggfunc=np.sum)

#Preencher valores vazios
tabela.fillna(0, inplace=True)

#Convertendo a tabela em matriz
matriz_conhecimento = tabela.values

#Imprimir a matriz de conhecimento
print(matriz_conhecimento)